// scripts/deploy.js
const { ethers } = require("hardhat");
require("dotenv").config();

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address);

  // Получаем адрес казначейства из .env
  const treasury = process.env.TREASURY_ADDRESS;
  if (!treasury) throw new Error("TREASURY_ADDRESS not set in .env");
  console.log("Treasury address:", treasury);

  // Деплой контракта AXFLOToken
  console.log("Deploying AXFLOToken...");
  const AXFLOToken = await ethers.getContractFactory("AXFLOToken");
  const token = await AXFLOToken.deploy(treasury);

  await token.deployed();
  console.log("AXFLOToken deployed to:", token.address);

  // Верификация (только для тестовых сетей)
  if (["mumbai", "sepolia", "polygon"].includes(hre.network.name)) {
    console.log("Verifying contract...");
    try {
      await hre.run("verify:verify", {
        address: token.address,
        constructorArguments: [treasury],
      });
    } catch (error) {
      console.error("Verification failed:", error.message);
    }
  }

  // Сохраняем адреса в конфиг для фронтенда
  saveFrontendConfig(token.address, treasury);
}

// Сохранение адресов в src/config.js
function saveFrontendConfig(tokenAddress, treasuryAddress) {
  const fs = require("fs");
  const path = require("path");

  const configDir = path.join(__dirname, "..", "src");
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }

  const configPath = path.join(configDir, "config.js");
  const configContent = `// Autogenerated by deploy.js
export const CONFIG = {
  tokenAddress: "${tokenAddress}",
  treasuryAddress: "${treasuryAddress}",
  networks: {
    mumbai: {
      chainId: 80001,
      rpcUrl: "https://rpc-mumbai.maticvigil.com",
    },
    polygon: {
      chainId: 137,
      rpcUrl: "https://polygon-rpc.com",
    },
  },
};
`;

  fs.writeFileSync(configPath, configContent);
  console.log("Frontend config saved to:", configPath);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});